from eratosthenes import sieve
import itertools

s = sieve(1000000)
prime_set = set(s)


def replace(s, i, n):
    """
    Replace the character at index i in the string s with the value n

    >>> replace('12345', 0, '8')
    '82345'

    >>> replace('12345', 1, '8')
    '18345'

    >>> replace('12345', 2, '8')
    '12845'

    >>> replace('12345', 3, '8')
    '12385'

    >>> replace('12345', 4, '8')
    '12348'
    """
    return s[:i] + n + s[i+1:]


def num_primes_in_family(x):
    """
    Find the max number of primes in the family of the prime x. A family
    is generated by replacing some digits in x with the same number.

    >>> num_primes_in_family(13)
    (6, '13, 23, 43, 53, 73, 83')

    >>> num_primes_in_family(56003)
    (7, '56003, 56113, 56333, 56443, 56663, 56773, 56993')

    """
    digs = str(x)
    max_fam = 0
    max_fam_list = ''

    dig_locations = range(len(digs))

    def replace_chain(digs, places, n):
        """
        Replace the character at digs, at each index in 'places', with n.
        """
        replaced = digs
        for p in places:
            replaced = replace(replaced, p, n)
        return replaced

    for x in itertools.combinations_with_replacement(dig_locations, len(digs)):
        fam = 0
        fam_list = []
        chain = set(x)
        for k in range(0, 10):
            # Replace the locations at x with the digit k.
            # Don't replace first digit with a 0.
            if k == 0 and 0 in chain:
                continue
            n = int(replace_chain(digs, chain, str(k)))
            # print 'testing', n
            if n in prime_set:
                fam += 1
                fam_list.append(str(n))
        if fam > max_fam:
            max_fam = fam
            max_fam_list = ', '.join(fam_list)

    return max_fam, max_fam_list

for p in s:
    mf, mfl = num_primes_in_family(p)
    if mf == 8:
        # This is weird
        # The answer is
        # (120383,
        #  '121313, 222323, 323333, 424343, 525353, 626363, 828383, 929393')
        #  Why isn't the prime 120383?
        print p, mfl
        break

if __name__ == "__main__":
    import doctest
    doctest.testmod()
