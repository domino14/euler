from math import sqrt

def getR4(r1, r2, r3, outside):
    mult = 1
    if outside:
        mult = -1
    return (r1*r2*r3)/(r1*r2 + r1*r3 + r2*r3 + mult*2*sqrt(r1*r2*r3*(r1+r2+r3)))


def fillInGap(level, r1, r2, r3, radii, outside):
    r4 = getR4(r1, r2, r3, outside)
    radii.append(r4)
    str = ''
    for i in range(0, level):
        str = str + '-'
#    print str, "Circle radius:", r4, "(Generated by",r1,r2,r3,outside,")"
    level = level - 1
    if level <= 0:
        return

    if r1 < 0 or r3 < 0 or r4 < 0:
        outside = True
    else:
        outside = False
    fillInGap(level, r1, r3, r4, radii, outside)
    if r2 < 0 or r3 < 0 or r4 < 0:
        outside = True
    else:
        outside = False
    fillInGap(level, r2, r3, r4, radii, outside)
    if r1 < 0 or r2 < 0 or r4 < 0:
        outside = True
    else:
        outside = False
    fillInGap(level, r1, r2, r4, radii, outside)

def solveProblem(r1, r2, r3, level):
    # solves the problem for the three given radii to recursive level

    r4 = getR4(r1, r2, r3, True) # get outside big circle

    radii = []

    fillInGap(level, r1, r2, r4, radii, True)
    fillInGap(level, r2, r3, r4, radii, True)
    fillInGap(level, r3, r1, r4, radii, True)
    fillInGap(level, r1, r2, r3, radii, False) # internal gap
    
    boundingR2 = r4*r4
    print "Bounding R2", boundingR2
    radii.append(r1) # add the three original circles
    radii.append(r2)
    radii.append(r3)

#    print radii
    notcovered = (boundingR2-sum(r*r for r in radii))/boundingR2
    print "Area not covered", round(notcovered, 8)



solveProblem(1,1,1,10)
